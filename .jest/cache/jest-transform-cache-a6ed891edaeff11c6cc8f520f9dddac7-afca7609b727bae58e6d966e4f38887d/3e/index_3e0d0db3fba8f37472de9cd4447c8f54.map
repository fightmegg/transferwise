{"version":3,"sources":["index.js"],"names":["SANDBOX_URL","LIVE_URL","VERSION","TransferWise","constructor","token","sandbox","Error","url","request","method","path","body","version","apiVersion","fetchOptions","json","headers","Authorization","JSON","stringify","then","resp","profiles","borderlessAccounts","profileId","recipientAccounts","create","accountDetails","get","accountId","delete","list","params","quotes","temporary","quoteDetails","quoteId","transfers","transferDetails","cancel","transferId","issues","fund","type","deliveryEstimate","simulation","processing","fundsConverted","outgoingPaymentSent","bouncedBack","fundsRefunded","webhooks","constructEvent","signature"],"mappings":"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","sourcesContent":["import fetch from \"node-fetch\";\nimport { encode } from \"querystring\";\nimport { constructEvent } from \"./webhooks\";\n\nconst SANDBOX_URL = \"https://api.sandbox.transferwise.tech\";\nconst LIVE_URL = \"https://api.transferwise.com\";\n\nconst VERSION = \"v1\";\n\nclass TransferWise {\n  constructor({ token, sandbox = false } = {}) {\n    if (!token) throw new Error(\"token is required\");\n\n    this.token = token;\n    this.sandbox = sandbox;\n    this.url = sandbox ? SANDBOX_URL : LIVE_URL;\n  }\n\n  request({ method = \"GET\", path = \"\", body, version } = {}) {\n    const apiVersion = `/${version || VERSION}`;\n    const url = this.url + apiVersion + path;\n    const fetchOptions = {\n      method,\n      json: true,\n      headers: {\n        Authorization: `Bearer ${this.token}`,\n        \"Content-Type\": \"application/json\",\n        \"cache-control\": \"no-cache\"\n      }\n    };\n    if (body) fetchOptions.body = JSON.stringify(body);\n    if (method === \"DELETE\") return fetch(url, fetchOptions);\n    return fetch(url, fetchOptions).then(resp => resp.json());\n  }\n\n  profiles() {\n    return this.request({ path: \"/profiles\" });\n  }\n\n  borderlessAccounts(profileId) {\n    return this.request({\n      path: `/borderless-accounts?profileId=${profileId}`\n    });\n  }\n\n  get recipientAccounts() {\n    return {\n      create: accountDetails =>\n        this.request({\n          method: \"POST\",\n          body: accountDetails,\n          path: \"/accounts\"\n        }),\n      get: accountId => this.request({ path: `/accounts/${accountId}` }),\n      delete: accountId =>\n        this.request({ method: \"DELETE\", path: `/accounts/${accountId}` }),\n      list: params => this.request({ path: `/accounts?${encode(params)}` })\n    };\n  }\n\n  get quotes() {\n    return {\n      temporary: params => this.request({ path: `/quotes?${encode(params)}` }),\n      create: quoteDetails =>\n        this.request({ method: \"POST\", body: quoteDetails, path: \"/quotes\" }),\n      get: quoteId => this.request({ path: `/quotes/${quoteId}` })\n    };\n  }\n\n  get transfers() {\n    return {\n      create: transferDetails =>\n        this.request({\n          method: \"POST\",\n          body: transferDetails,\n          path: \"/transfers\"\n        }),\n      cancel: transferId =>\n        this.request({\n          method: \"PUT\",\n          path: `/transfers/${transferId}/cancel`\n        }),\n      get: transferId => this.request({ path: `/transfers/${transferId}` }),\n      issues: transferId =>\n        this.request({ path: `/transfers/${transferId}/issues` }),\n      fund: (profileId, transferId) =>\n        this.request({\n          method: \"POST\",\n          version: \"v3\",\n          body: { type: \"BALANCE\" },\n          path: `/profiles/${profileId}/transfers/${transferId}/payments`\n        }),\n      deliveryEstimate: transferId =>\n        this.request({ path: `/delivery-estimates/${transferId}` }),\n      list: params => this.request({ path: `/transfers?${encode(params)}` })\n    };\n  }\n\n  get simulation() {\n    return {\n      transfers: {\n        processing: transferId =>\n          this.request({\n            path: `/simulation/transfers/${transferId}/processing`\n          }),\n        fundsConverted: transferId =>\n          this.request({\n            path: `/simulation/transfers/${transferId}/funds_converted`\n          }),\n        outgoingPaymentSent: transferId =>\n          this.request({\n            path: `/simulation/transfers/${transferId}/outgoing_payment_sent`\n          }),\n        bouncedBack: transferId =>\n          this.request({\n            path: `/simulation/transfers/${transferId}/bounced_back`\n          }),\n        fundsRefunded: transferId =>\n          this.request({\n            path: `/simulation/transfers/${transferId}/funds_refunded`\n          })\n      }\n    };\n  }\n\n  get webhooks() {\n    return {\n      constructEvent: (body, signature) =>\n        constructEvent(this.sandbox, body, signature)\n    };\n  }\n}\n\nexport default TransferWise;\n"]}